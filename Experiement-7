/* Problem Statement:
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0. */
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int maxProfit(vector<int>& prices) {
    int min_price = INT_MAX;  // Initialize the min_price to a very large number
    int max_profit = 0;  // Initialize max_profit to 0
    
    for (int price : prices) {
        // Update min_price if we find a new lower price
        min_price = min(min_price, price);
        
        // Calculate profit if we sell at the current price
        int profit = price - min_price;
        
        // Update max_profit if the current profit is greater
        max_profit = max(max_profit, profit);
    }
    
    return max_profit;
}

int main() {
    vector<int> prices = {7, 1, 5, 3, 6, 4};  // Example prices
    cout << "Maximum profit: " << maxProfit(prices) << endl;
    return 0;
}

/* Problem Statement:
A message containing letters from A-Z can be encoded into numbers using the following mapping:
'A' -> "1", 'B' -> "2", ..., 'Z' -> "26".
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways).
Given a string s containing only digits, return the number of ways to decode it. The test cases are generated so that the answer fits in a 32-bit integer. */
#include <iostream>
#include <vector>
#include <string>
using namespace std;

int numDecodings(string s) {
    if (s.empty() || s[0] == '0') return 0; // If string is empty or starts with '0', no valid decoding
    
    int n = s.length();
    vector<int> dp(n + 1, 0);  // dp[i] stores the number of ways to decode s[0:i]
    dp[0] = 1;  // There's one way to decode an empty string
    
    // Start filling dp array
    for (int i = 1; i <= n; ++i) {
        // If current digit is valid (between '1' and '9')
        if (s[i - 1] != '0') {
            dp[i] += dp[i - 1];
        }
        
        // If the last two digits form a valid number between 10 and 26
        if (i > 1 && s[i - 2] != '0' && (s[i - 2] - '0') * 10 + (s[i - 1] - '0') <= 26) {
            dp[i] += dp[i - 2];
        }
    }
    
    return dp[n];
}

int main() {
    string s = "226";  // Example input
    cout << "Number of ways to decode: " << numDecodings(s) << endl;
    return 0;
}

/* Problem Statement:
We can scramble a string s to get a string t using the following algorithm:
If the length of the string is 1, stop.
If the length of the string is > 1, do the following:
Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
Randomly decide to swap the two substrings or to keep them in the same order.
Apply step 1 recursively on each of the two substrings x and y.
Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false. */
#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>
using namespace std;

unordered_map<string, bool> memo;

bool isScrambleHelper(const string& s1, const string& s2, int i, int j, int len) {
    // If the substring is already computed, return the result
    string key = to_string(i) + "_" + to_string(j) + "_" + to_string(len);
    if (memo.find(key) != memo.end()) {
        return memo[key];
    }

    // If the substrings are equal
    if (s1.substr(i, len) == s2.substr(j, len)) {
        return memo[key] = true;
    }

    // If the sorted substrings are not the same, return false
    if (sorted(s1.begin() + i, s1.begin() + i + len) != sorted(s2.begin() + j, s2.begin() + j + len)) {
        return memo[key] = false;
    }

    // Try all possible split points
    for (int k = 1; k < len; ++k) {
        // Case 1: No swap, check if both parts match
        if (isScrambleHelper(s1, s2, i, j, k) && isScrambleHelper(s1, s2, i + k, j + k, len - k)) {
            return memo[key] = true;
        }
        // Case 2: Swap, check if the parts after swapping match
        if (isScrambleHelper(s1, s2, i, j + len - k, k) && isScrambleHelper(s1, s2, i + k, j, len - k)) {
            return memo[key] = true;
        }
    }

    return memo[key] = false;
}

bool isScramble(string s1, string s2) {
    // If lengths are different, it's impossible to scramble
    if (s1.length() != s2.length()) {
        return false;
    }
    // Start recursive check from the beginning of both strings
    return isScrambleHelper(s1, s2, 0, 0, s1.length());
}

int main() {
    string s1 = "great";
    string s2 = "rgeat";
    cout << (isScramble(s1, s2) ? "True" : "False") << endl; // Output: True

    s1 = "abcde";
    s2 = "caebd";
    cout << (isScramble(s1, s2) ? "True" : "False") << endl; // Output: False

    return 0;
}

/* Problem Statement:
You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps.
In how many distinct ways can you climb to the top? */
#include <iostream>
#include <vector>
using namespace std;

int climbStairs(int n) {
    if (n == 1) return 1; // Base case: only one way to climb one step
    if (n == 2) return 2; // Base case: two ways to climb two steps

    int prev1 = 2, prev2 = 1; // Initialize the base cases for dp[2] and dp[1]
    int current;
    
    for (int i = 3; i <= n; ++i) {
        current = prev1 + prev2; // Current step is the sum of previous two
        prev2 = prev1; // Move prev1 and prev2 forward
        prev1 = current;
    }

    return prev1; // The number of ways to reach the nth step
}

int main() {
    int n = 5; // Example input
    cout << "Ways to climb " << n << " steps: " << climbStairs(n) << endl;
    return 0;
}

/* Problem Statement:
Given an integer array nums, find the subarray with the largest sum, and return its sum.
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6 */
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int maxSubArray(vector<int>& nums) {
    int current_sum = nums[0]; // Start with the first element
    int max_sum = nums[0]; // Initialize max_sum with the first element
    
    for (int i = 1; i < nums.size(); ++i) {
        current_sum = max(nums[i], current_sum + nums[i]); // Extend or start a new subarray
        max_sum = max(max_sum, current_sum); // Update the maximum sum
    }
    
    return max_sum; // Return the maximum sum found
}

int main() {
    vector<int> nums = {-2,1,-3,4,-1,2,1,-5,4};
    cout << "Maximum Subarray Sum: " << maxSubArray(nums) << endl; // Output: 6
    return 0;
}

/* Problem Statement:
Given a string s, return the longest palindromic substring in s.
Input: s = "babad"
Output: "bab" (Note: "aba" is also a valid answer.) */
#include <iostream>
#include <string>
using namespace std;

string expandAroundCenter(const string& s, int left, int right) {
    while (left >= 0 && right < s.size() && s[left] == s[right]) {
        left--;
        right++;
    }
    // Substring [left+1, right-1] is the palindrome
    return s.substr(left + 1, right - left - 1);
}

string longestPalindrome(string s) {
    if (s.empty()) return "";
    
    string longest = "";
    
    for (int i = 0; i < s.size(); ++i) {
        // Odd length palindrome
        string palindrome1 = expandAroundCenter(s, i, i);
        if (palindrome1.size() > longest.size()) {
            longest = palindrome1;
        }
        
        // Even length palindrome
        string palindrome2 = expandAroundCenter(s, i, i + 1);
        if (palindrome2.size() > longest.size()) {
            longest = palindrome2;
        }
    }
    
    return longest;
}

int main() {
    string s = "babad";
    cout << "Longest Palindromic Substring: " << longestPalindrome(s) << endl; // Output: "bab" or "aba"
    return 0;
}

/* Problem Statement:
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one.
Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police. */
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Helper function for House Robber DP problem
int robHelper(const vector<int>& nums) {
    int n = nums.size();
    if (n == 0) return 0;
    if (n == 1) return nums[0];

    vector<int> dp(n, 0);
    dp[0] = nums[0];
    dp[1] = max(nums[0], nums[1]);

    for (int i = 2; i < n; ++i) {
        dp[i] = max(dp[i-1], dp[i-2] + nums[i]);
    }

    return dp[n-1];
}

int rob(vector<int>& nums) {
    int n = nums.size();
    if (n == 1) return nums[0];  // Only one house
    
    // Case 1: Rob houses from 0 to n-2
    vector<int> nums1(nums.begin(), nums.end() - 1);
    int case1 = robHelper(nums1);
    
    // Case 2: Rob houses from 1 to n-1
    vector<int> nums2(nums.begin() + 1, nums.end());
    int case2 = robHelper(nums2);
    
    // Return the maximum of the two cases
    return max(case1, case2);
}

int main() {
    vector<int> nums = {2, 3, 2};
    cout << "Maximum amount of money that can be robbed: " << rob(nums) << endl;  // Output: 3
    return 0;
}
