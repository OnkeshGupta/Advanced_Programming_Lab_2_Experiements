// Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Each input has exactly one solution, and you cannot use the same element twice.
#include <iostream> #include <unordered_map> #include <vector>
using namespace std;
vector<int> twoSum(vector<int>& nums, int target)
{
unordered_map<int, int> seen;
for (int i = 0; i < nums.size(); i++) { int complement = target - nums[i];
if (seen.find(complement) != seen.end()) { return {seen[complement], i};
}
seen[nums[i]] = i;
}
return {};
}
int main() {
vector<int> nums = {2, 7, 11, 15}; int target = 9;
vector<int> result = twoSum(nums, target);
cout << "Indexes: [" << result[0] << ", " << result[1] << "]" << endl; return 0;
}

// You are given a 0-indexed array nums of length n. You are initially positioned at nums[0]. Each element nums[i] represents the maximum length of a forward jump from index i. Return the minimum number of jumps to reach nums[n - 1].
#include <iostream>
#include <vector>
using namespace std;

int minJumps(vector<int>& nums) {
    int n = nums.size();
    if (n <= 1) return 0;

    int jumps = 0;
    int currentEnd = 0;
    int farthest = 0;

    for (int i = 0; i < n - 1; ++i) {
        farthest = max(farthest, i + nums[i]);

        // When we reach the end of the current jump
        if (i == currentEnd) {
            jumps++;
            currentEnd = farthest;

            // If we can't move further
            if (currentEnd >= n - 1)
                break;
        }
    }

    return jumps;
}

int main() {
    vector<int> nums = {2, 3, 1, 1, 4};
    cout << "Minimum jumps: " << minJumps(nums) << endl;
    return 0;
}

// Given a string path, which is an absolute path to a file or directory in a Unix-style file system, convert it to the simplified canonical path.
#include <iostream>
#include <vector>
#include <sstream>
#include <stack>
using namespace std;

string simplifyPath(string path) {
    vector<string> stack;
    stringstream ss(path);
    string token;

    while (getline(ss, token, '/')) {
        if (token == "" || token == ".") {
            continue;
        } else if (token == "..") {
            if (!stack.empty()) stack.pop_back();
        } else {
            stack.push_back(token);
        }
    }

    string result = "/";
    for (int i = 0; i < stack.size(); ++i) {
        result += stack[i];
        if (i != stack.size() - 1) result += "/";
    }

    return result;
}

int main() {
    string path = "/a/./b/../../c/";
    cout << "Simplified Path: " << simplifyPath(path) << endl;
    return 0;
}

// Implement a FIFO queue using two stacks. The queue should support all the functions of a normal queue: push, peek, pop, and empty.
#include <iostream> #include <stack> using namespace std; class MyQueue { private:
stack<int> inputStack, outputStack; void transfer() {
while (!inputStack.empty()) { outputStack.push(inputStack.top()); inputStack.pop();
} }
public:
void push(int x) { inputStack.push(x);
}
int pop() {
if (outputStack.empty()) { transfer();
}
int top = outputStack.top(); outputStack.pop();
return top;
}
int peek() {
if (outputStack.empty()) { transfer();
} return outputStack.top();
}
bool empty() {
return inputStack.empty() && outputStack.empty();
}
};
int main() {
MyQueue q; q.push(1);
q.push(2);
cout << "Peek: " << q.peek() << endl; // Outputs 1 cout << "Pop: " << q.pop() << endl; // Outputs 1
cout << "Empty: " << q.empty() << endl; // Outputs 0 (false) return 0;
}
