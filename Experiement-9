/* Problem Statement:
There is an undirected graph with nn nodes, where each node is numbered between 00 and n−1n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node uu is adjacent to. The graph has the following properties:
There are no self-edges (i.e., graph[u] does not contain uu).
There are no parallel edges (i.e., graph[u] does not contain duplicate values).
If vv is in graph[u], then uu is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes uu and vv such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets AA and BB such that every edge in the graph connects a node in set AA and a node in set BB.
Return true if and only if it is bipartite. */
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

bool isBipartite(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> color(n, -1);  // -1 means uncolored, 0 and 1 are the two colors

    // Traverse all components (if the graph is not connected)
    for (int i = 0; i < n; i++) {
        if (color[i] == -1) {  // If the node is uncolored
            // BFS to check if the component is bipartite
            queue<int> q;
            q.push(i);
            color[i] = 0;  // Start coloring the first node with color 0

            while (!q.empty()) {
                int node = q.front();
                q.pop();

                // Check all adjacent nodes
                for (int neighbor : graph[node]) {
                    if (color[neighbor] == -1) {  // If the neighbor is uncolored
                        color[neighbor] = 1 - color[node];  // Color with the opposite color
                        q.push(neighbor);
                    } else if (color[neighbor] == color[node]) {  // If the neighbor has the same color, it's not bipartite
                        return false;
                    }
                }
            }
        }
    }

    return true;
}

int main() {
    vector<vector<int>> graph = {
        {1, 3},  // Node 0 is connected to nodes 1 and 3
        {0, 2},  // Node 1 is connected to nodes 0 and 2
        {1, 3},  // Node 2 is connected to nodes 1 and 3
        {0, 2}   // Node 3 is connected to nodes 0 and 2
    };

    if (isBipartite(graph)) {
        cout << "The graph is bipartite." << endl;
    } else {
        cout << "The graph is not bipartite." << endl;
    }

    return 0;
}

/* Problem Statement:
An nn-bit gray code sequence is a sequence of 2n2^n integers where:
Every integer is in the inclusive range [0, 2n−12^n - 1],
The first integer is 0,
An integer appears no more than once in the sequence,
The binary representation of every pair of adjacent integers differs by exactly one bit, and
The binary representation of the first and last integers differs by exactly one bit.
Given an integer nn, return any valid nn-bit gray code sequence. */
#include <iostream>
#include <vector>
using namespace std;

// Function to generate the n-bit Gray Code sequence
vector<int> grayCode(int n) {
    vector<int> result;
    result.push_back(0); // The first number in Gray Code sequence is 0
    
    // Generate the sequence for n bits
    for (int i = 0; i < n; i++) {
        int size = result.size();
        // Reflect the current sequence and prefix 1 to the reflected numbers
        for (int j = size - 1; j >= 0; j--) {
            result.push_back(result[j] | (1 << i));
        }
    }
    
    return result;
}

int main() {
    int n = 3;  // Example input
    vector<int> gray_code_sequence = grayCode(n);
    
    cout << "Gray Code sequence for " << n << " bits: ";
    for (int num : gray_code_sequence) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}

/* Problem Statement:
There are nn people, each with a unique ID from 00 to n−1n - 1. You are given an integer array groupSizes, where groupSizes[i] represents the size of the group that person ii is in. For example, if groupSizes[1] = 3, then person 11 must be in a group of size 3.
Return a list of groups such that each person ii is in a group of size groupSizes[i]. Each person should appear in exactly one group. If there are multiple answers, return any of them. */
#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

vector<vector<int>> groupPeople(vector<int>& groupSizes) {
    unordered_map<int, vector<int>> groups;  // Map to store group sizes and their corresponding members
    vector<vector<int>> result;  // Final result to store all the groups
    
    // Traverse through the groupSizes array
    for (int i = 0; i < groupSizes.size(); ++i) {
        int groupSize = groupSizes[i];
        
        // Add the person to the corresponding group
        groups[groupSize].push_back(i);
        
        // If a group has reached its required size, finalize the group
        if (groups[groupSize].size() == groupSize) {
            result.push_back(groups[groupSize]);
            groups[groupSize].clear();  // Reset the group for the next batch of people
        }
    }
    
    return result;
}

int main() {
    vector<int> groupSizes = {3, 3, 3, 3, 3, 1, 3};
    vector<vector<int>> result = groupPeople(groupSizes);
    
    // Print the result
    cout << "Groups formed:" << endl;
    for (const auto& group : result) {
        for (int person : group) {
            cout << person << " ";
        }
        cout << endl;
    }

    return 0;
}

/* Problem Statement:
A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively. The geometric information of each building is given in the array buildings where buildings[i] = [left_i, right_i, height_i]:
left_i is the x-coordinate of the left edge of the ith building.
right_i is the x-coordinate of the right edge of the ith building.
height_i is the height of the ith building.
The skyline should be represented as a list of "key points" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline, except for the last point, which always has a y-coordinate of 0 and marks the skyline's termination. */
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
    vector<vector<int>> result;

    // Create a list of events (left edge and right edge of buildings)
    vector<pair<int, pair<int, int>>> events;
    for (const auto& b : buildings) {
        // Left edge event: (x, height, start)
        events.push_back({b[0], {b[2], 1}});
        // Right edge event: (x, height, end)
        events.push_back({b[1], {b[2], -1}});
    }

    // Sort events:
    // 1. Sort by x-coordinate
    // 2. For same x, process start events before end events
    // 3. For same x and type (start or end), process taller buildings first for start, and shorter for end
    sort(events.begin(), events.end(), [](const pair<int, pair<int, int>>& a, const pair<int, pair<int, int>>& b) {
        if (a.first != b.first) return a.first < b.first;
        if (a.second.second != b.second.second) return a.second.second > b.second.second;
        return a.second.first > b.second.first;
    });

    // Max-heap to store the height of buildings (we store negative heights to simulate a max-heap using min-heap)
    priority_queue<int> heap;
    heap.push(0); // We start with the ground level
    
    // Variable to track the last maximum height
    int lastHeight = 0;

    // Iterate through all the events
    for (const auto& event : events) {
        int x = event.first;
        int height = event.second.first;
        int type = event.second.second;
        
        // If it's a start event, add the building height
        if (type == 1) {
            heap.push(height);
        }
        // If it's an end event, remove the building height
        else {
            // Lazy deletion: we do not remove elements directly from the heap
            // We will clean up the heap when we need to access the max height
            heap.push(-height);  // Mark it for removal
        }

        // Get the current maximum height
        int currentHeight = -heap.top();

        // If the height has changed, record a key point
        if (currentHeight != lastHeight) {
            result.push_back({x, currentHeight});
            lastHeight = currentHeight;
        }
    }

    return result;
}

int main() {
    // Example buildings
    vector<vector<int>> buildings = {{2, 9, 10}, {3, 7, 15}, {5, 12, 12}, {15, 20, 10}, {19, 24, 8}};
    
    // Get the skyline
    vector<vector<int>> skyline = getSkyline(buildings);
    
    // Print the result
    for (const auto& point : skyline) {
        cout << "[" << point[0] << ", " << point[1] << "] ";
    }
    cout << endl;

    return 0;
}

/* Problem Statement:
You are given two strings ss and tt. String tt is generated by randomly shuffling string ss and then adding one more letter at a random position.
Return the letter that was added to tt. */
#include <iostream>
#include <string>
using namespace std;

char findTheDifference(string s, string t) {
    char result = 0;
    
    // XOR all characters from both strings
    for (char c : s) {
        result ^= c;
    }
    for (char c : t) {
        result ^= c;
    }

    return result;
}

int main() {
    string s = "abcd";
    string t = "abcde";

    char addedChar = findTheDifference(s, t);
    cout << "The added character is: " << addedChar << endl;

    return 0;
}

/* Problem Statement:
You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.
Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.
Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally. */
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool PredictTheWinner(vector<int>& nums) {
    int n = nums.size();
    
    // dp[i][j] represents the maximum score difference Player 1 can achieve over Player 2
    vector<vector<int>> dp(n, vector<int>(n, 0));
    
    // Base case: when there's only one element to choose from, the score difference is the element itself
    for (int i = 0; i < n; i++) {
        dp[i][i] = nums[i];
    }
    
    // Fill the DP table for subarrays of length 2 to n
    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1]);
        }
    }
    
    // Player 1 can win if the score difference is >= 0
    return dp[0][n-1] >= 0;
}

int main() {
    vector<int> nums = {1, 5, 2};
    cout << (PredictTheWinner(nums) ? "True" : "False") << endl;

    return 0;
}

/* Problem Statement:
There are nn computers numbered from 0 to n−1n - 1 connected by ethernet cables. Connections are given by connections[i] = [ai, bi] representing a connection between computers aia_i and bib_i. You are given the initial network, and you can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.
Return the minimum number of times you need to do this to make all computers connected. If it is not possible, return -1. */
#include <iostream>
#include <vector>
#include <numeric>

using namespace std;

class UnionFind {
public:
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        iota(parent.begin(), parent.end(), 0); // initialize parent as itself
    }

    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // Path compression
        }
        return parent[x];
    }

    void unionSets(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }

private:
    vector<int> parent;
    vector<int> rank;
};

int makeConnected(int n, vector<vector<int>>& connections) {
    // If there aren't enough cables to form a connected graph
    if (connections.size() < n - 1) {
        return -1;
    }
    
    UnionFind uf(n);
    
    // Union the connected nodes
    for (const auto& conn : connections) {
        uf.unionSets(conn[0], conn[1]);
    }
    
    // Count how many connected components there are
    int components = 0;
    for (int i = 0; i < n; i++) {
        if (uf.find(i) == i) {
            components++;
        }
    }
    
    // The number of operations needed is the number of components minus 1
    return components - 1;
}

int main() {
    int n = 6;
    vector<vector<int>> connections = {{0, 1}, {0, 2}, {3, 4}};
    
    int result = makeConnected(n, connections);
    
    cout << "Minimum number of moves: " << result << endl;
    
    return 0;
}

/* Problem Statement:
There are nn servers numbered from 0 to n−1n - 1 connected by undirected server-to-server connections forming a network. A critical connection is a connection that, if removed, will make some servers unable to reach some other server.
Return all critical connections in the network in any order. */
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<vector<int>> graph(n);
        for (auto& conn : connections) {
            graph[conn[0]].push_back(conn[1]);
            graph[conn[1]].push_back(conn[0]);
        }

        vector<int> discovery(n, -1), low(n, -1), parent(n, -1);
        vector<vector<int>> result;
        int time = 0;

        // Helper DFS function
        function<void(int)> dfs = [&](int u) {
            discovery[u] = low[u] = time++;
            for (int v : graph[u]) {
                if (discovery[v] == -1) { // If v is not visited
                    parent[v] = u;
                    dfs(v);
                    low[u] = min(low[u], low[v]);
                    
                    // Check if the current edge is a critical connection
                    if (low[v] > discovery[u]) {
                        result.push_back({u, v});
                    }
                } else if (v != parent[u]) { // Back edge (v is already visited, and it's not the parent)
                    low[u] = min(low[u], discovery[v]);
                }
            }
        };

        // Perform DFS for every node (in case the graph is disconnected)
        for (int i = 0; i < n; ++i) {
            if (discovery[i] == -1) {
                dfs(i);
            }
        }

        return result;
    }
};

int main() {
    Solution sol;
    int n = 4;
    vector<vector<int>> connections = {{0, 1}, {1, 2}, {2, 0}, {1, 3}};
    
    vector<vector<int>> result = sol.criticalConnections(n, connections);
    
    cout << "Critical connections:\n";
    for (const auto& conn : result) {
        cout << "[" << conn[0] << ", " << conn[1] << "]\n";
    }
    
    return 0;
}
